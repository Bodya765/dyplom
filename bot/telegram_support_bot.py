import os
import sys
import django
import asyncio
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from asgiref.sync import sync_to_async
from django.db.models import Q
from openai import OpenAI

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DJANGO_PROJECT_PATH = os.getenv("DJANGO_PROJECT_PATH")
DJANGO_SETTINGS_MODULE = os.getenv("DJANGO_SETTINGS_MODULE")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Django
sys.path.append(DJANGO_PROJECT_PATH)
os.environ.setdefault("DJANGO_SETTINGS_MODULE", DJANGO_SETTINGS_MODULE)
django.setup()

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª—ñ Django
from announcements.models import SupportRequest

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Django
create_support_request = sync_to_async(SupportRequest.objects.create)
get_pending_requests = sync_to_async(SupportRequest.objects.filter)
update_request = sync_to_async(SupportRequest.objects.get)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –ö–Ω–æ–ø–∫–∏
CONTACT_ADMIN_BUTTON = "üìû –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
SATISFIED_BUTTON = "‚úÖ –î—è–∫—É—é, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—ñ–¥—Ö–æ–¥–∏—Ç—å"
REPLY_KEYBOARD = [[KeyboardButton(CONTACT_ADMIN_BUTTON)]]
REPLY_MARKUP = ReplyKeyboardMarkup(REPLY_KEYBOARD, resize_keyboard=True)
INLINE_KEYBOARD = [
    [InlineKeyboardButton(SATISFIED_BUTTON, callback_data="satisfied")],
    [InlineKeyboardButton(CONTACT_ADMIN_BUTTON, callback_data="contact_admin")]
]
INLINE_MARKUP = InlineKeyboardMarkup(INLINE_KEYBOARD)

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å–∞–π—Ç—É VseOgolosha. –ó–∞–¥–∞–≤–∞–π —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏!\n\n"
        "–Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–æ–±—ñ –Ω–µ –ø—ñ–¥—ñ–π–¥–µ, —Ç–∏ –∑–º–æ–∂–µ—à –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏ /admin.",
        reply_markup=REPLY_MARKUP
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ!",
        reply_markup=REPLY_MARKUP
    )
    context.user_data['awaiting_admin_message'] = True

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI
async def get_ai_response(question: str) -> str:
    try:
        response = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢–∏ –±–æ—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å–∞–π—Ç—É –æ–≥–æ–ª–æ—à–µ–Ω—å VseOgolosha. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ, —á—ñ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ."},
                    {"role": "user", "content": question}
                ],
                max_tokens=150,
                temperature=0.7
            )
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {str(e)}"

# –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def check_admin_responses(context: ContextTypes.DEFAULT_TYPE):
    pending_requests = await get_pending_requests(
        Q(response__isnull=False) & Q(handled_by_admin=False) & Q(status='answered')
    )
    pending_requests = await sync_to_async(list)(pending_requests)

    for request in pending_requests:
        await context.bot.send_message(
            chat_id=request.user_id,
            text=f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è: {request.question}\n–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {request.response}",
            reply_markup=REPLY_MARKUP
        )
        request.handled_by_admin = True
        await sync_to_async(request.save)()
    await asyncio.sleep(30)

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "satisfied":
        await query.message.reply_text(
            "–†–∞–¥–∏–π, —â–æ –∑–º—ñ–≥ –¥–æ–ø–æ–º–æ–≥—Ç–∏! –Ø–∫—â–æ –±—É–¥—É—Ç—å —ñ–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è, –ø–∏—à–∏!",
            reply_markup=REPLY_MARKUP
        )
        # –û—á–∏—â–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
        if 'last_question' in context.user_data:
            del context.user_data['last_question']
    elif query.data == "contact_admin":
        if 'last_question' in context.user_data:
            user = query.message.chat
            user_id = str(user.id)
            username = user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π"
            question = context.user_data['last_question']

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            support_request = await create_support_request(
                user_id=user_id,
                username=username,
                question=question,
                status="pending",
                handled_by_admin=False
            )

            admin_keyboard = [
                [InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", url="http://127.0.0.1:8000/admin-panel/")]
            ]
            admin_reply_markup = InlineKeyboardMarkup(admin_keyboard)

            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"–ó–∞–ø–∏—Ç #{support_request.id} –≤—ñ–¥ @{username} (ID: {user_id}):\n{question}",
                reply_markup=admin_reply_markup
            )

            await query.message.reply_text(
                f"–¢–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É ({ADMIN_USERNAME})! –û—á—ñ–∫—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.",
                reply_markup=REPLY_MARKUP
            )
            # –û—á–∏—â–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
            del context.user_data['last_question']
        else:
            await query.message.reply_text(
                "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–≤–æ—î –æ—Å—Ç–∞–Ω–Ω—î –ø–∏—Ç–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à–∏ –π–æ–≥–æ —â–µ —Ä–∞–∑.",
                reply_markup=REPLY_MARKUP
            )
            context.user_data['awaiting_admin_message'] = True

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    message_text = update.message.text.strip()

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—á—ñ–∫—É—î –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if 'awaiting_admin_message' in context.user_data and context.user_data['awaiting_admin_message']:
        user_id = str(user.id)
        username = user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π"

        support_request = await create_support_request(
            user_id=user_id,
            username=username,
            question=message_text,
            status="pending",
            handled_by_admin=False
        )

        admin_keyboard = [
            [InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", url="http://127.0.0.1:8000/admin-panel/")]
        ]
        admin_reply_markup = InlineKeyboardMarkup(admin_keyboard)

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ó–∞–ø–∏—Ç #{support_request.id} –≤—ñ–¥ @{username} (ID: {user_id}):\n{message_text}",
            reply_markup=admin_reply_markup
        )

        await update.message.reply_text(
            f"–¢–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É ({ADMIN_USERNAME})! –û—á—ñ–∫—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.",
            reply_markup=REPLY_MARKUP
        )
        context.user_data['awaiting_admin_message'] = False
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    context.user_data['last_question'] = message_text

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI
    ai_response = await get_ai_response(message_text)
    await update.message.reply_text(
        f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {ai_response}\n\n–ß–∏ –ø—ñ–¥—ñ–π—à–ª–∞ —Ç–æ–±—ñ —Ü—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å?",
        reply_markup=INLINE_MARKUP
    )

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.job_queue.run_repeating(check_admin_responses, interval=30, first=0)
    app.run_polling()

if __name__ == "__main__":
    main()