import os
import sys
import django
import asyncio
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from asgiref.sync import sync_to_async
from django.db.models import Q

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DJANGO_PROJECT_PATH = os.getenv("DJANGO_PROJECT_PATH")
DJANGO_SETTINGS_MODULE = os.getenv("DJANGO_SETTINGS_MODULE")

sys.path.append(DJANGO_PROJECT_PATH)
os.environ.setdefault("DJANGO_SETTINGS_MODULE", DJANGO_SETTINGS_MODULE)

django.setup()

from announcements.models import SupportRequest

create_support_request = sync_to_async(SupportRequest.objects.create)
get_pending_requests = sync_to_async(SupportRequest.objects.filter)
update_request = sync_to_async(SupportRequest.objects.get)

CONTACT_ADMIN_BUTTON = "üìû –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
reply_keyboard = [[KeyboardButton(CONTACT_ADMIN_BUTTON)]]
reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å–∞–π—Ç—É VseOgolosha. –ó–∞–¥–∞–≤–∞–π —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –¥–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–æ–±—ñ –Ω–∞ –Ω—å–æ–≥–æ!\n\n"
        "–©–æ–± –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∞–π—Ç—É —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ –∞–±–æ –∫–æ–º–∞–Ω–¥–æ—é /admin",
        reply_markup=reply_markup
    )

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ!",
        reply_markup=reply_markup
    )
    context.user_data['awaiting_admin_message'] = True

async def check_admin_responses(context: ContextTypes.DEFAULT_TYPE):
    pending_requests = await get_pending_requests(
        Q(response__isnull=False) & Q(handled_by_admin=False) & Q(status='answered')
    )
    pending_requests = await sync_to_async(list)(pending_requests)

    for request in pending_requests:
        await context.bot.send_message(
            chat_id=request.user_id,
            text=f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è: {request.question}\n–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {request.response}",
            reply_markup=reply_markup
        )
        request.handled_by_admin = True
        await sync_to_async(request.save)()
    await asyncio.sleep(30)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = str(user.id)
    username = user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π"
    message_text = update.message.text.lower().strip()

    if 'awaiting_admin_message' in context.user_data and context.user_data['awaiting_admin_message']:
        support_request = await create_support_request(
            user_id=user_id,
            username=username,
            question=message_text,
            status="pending",
            handled_by_admin=False
        )

        admin_keyboard = [
            [InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", url="http://127.0.0.1:8000/admin-panel/")]
        ]
        admin_reply_markup = InlineKeyboardMarkup(admin_keyboard)

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ó–∞–ø–∏—Ç #{support_request.id} –≤—ñ–¥ @{username} (ID: {user_id}):\n{message_text}",
            reply_markup=admin_reply_markup
        )

        await update.message.reply_text(
            f"–¢–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É ({ADMIN_USERNAME})! –û—á—ñ–∫—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.",
            reply_markup=reply_markup
        )
        context.user_data['awaiting_admin_message'] = False
        return

    if message_text == CONTACT_ADMIN_BUTTON.lower():
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ!",
            reply_markup=reply_markup
        )
        context.user_data['awaiting_admin_message'] = True
        return

    support_request = await create_support_request(
        user_id=user_id,
        username=username,
        question=message_text,
        status="pending",
        handled_by_admin=False
    )

    admin_keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", url="http://127.0.0.1:8000/admin-panel/")]
    ]
    admin_reply_markup = InlineKeyboardMarkup(admin_keyboard)

    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"–ó–∞–ø–∏—Ç #{support_request.id} –≤—ñ–¥ @{username} (ID: {user_id}):\n{message_text}",
        reply_markup=admin_reply_markup
    )

    await update.message.reply_text(
        f"–¢–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É ({ADMIN_USERNAME})! –û—á—ñ–∫—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.",
        reply_markup=reply_markup
    )

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.job_queue.run_repeating(check_admin_responses, interval=30, first=0)
    app.run_polling()

if __name__ == "__main__":
    main()